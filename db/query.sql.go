// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_group_rels (user_id, group_id, permission) VALUES ($1, $2, $3)
`

type AddUserToGroupParams struct {
	UserID     string `json:"user_id"`
	GroupID    string `json:"group_id"`
	Permission int16  `json:"permission"`
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.UserID, arg.GroupID, arg.Permission)
	return err
}

const checkFollowing = `-- name: CheckFollowing :one
SELECT EXISTS (SELECT follower_id, followee_id FROM follow_rels WHERE follower_id = $1 AND followee_id = $2)
`

type CheckFollowingParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) CheckFollowing(ctx context.Context, arg CheckFollowingParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkFollowing, arg.FollowerID, arg.FolloweeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkGroupExists = `-- name: CheckGroupExists :one
SELECT count(*) FROM user_group_rels JOIN groups ON user_group_rels.group_id = groups.id
    WHERE user_id = $1 AND groups.name = $2
`

type CheckGroupExistsParams struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) CheckGroupExists(ctx context.Context, arg CheckGroupExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkGroupExists, arg.UserID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkMeigenExists = `-- name: CheckMeigenExists :one
SELECT count(*) FROM meigens WHERE id = $1
`

func (q *Queries) CheckMeigenExists(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkMeigenExists, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkMeigenExistsByMeigen = `-- name: CheckMeigenExistsByMeigen :one
SELECT count(*) FROM meigens JOIN poets ON meigens.poet_id = poets.id
    WHERE meigens.meigen = $1 AND meigens.whom_id = $2 AND meigens.group_id = $3 AND poets.name = $4
`

type CheckMeigenExistsByMeigenParams struct {
	Meigen  string `json:"meigen"`
	WhomID  string `json:"whom_id"`
	GroupID string `json:"group_id"`
	Name    string `json:"name"`
}

func (q *Queries) CheckMeigenExistsByMeigen(ctx context.Context, arg CheckMeigenExistsByMeigenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkMeigenExistsByMeigen,
		arg.Meigen,
		arg.WhomID,
		arg.GroupID,
		arg.Name,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkPoetExists = `-- name: CheckPoetExists :one
SELECT id FROM poets WHERE name = $1 AND group_id = $2
`

type CheckPoetExistsParams struct {
	Name    string `json:"name"`
	GroupID string `json:"group_id"`
}

func (q *Queries) CheckPoetExists(ctx context.Context, arg CheckPoetExistsParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, checkPoetExists, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const checkReactionExists = `-- name: CheckReactionExists :one
SELECT reaction FROM reactions WHERE meigen_id = $1 AND user_id = $2 AND reaction = $3
`

type CheckReactionExistsParams struct {
	MeigenID uuid.UUID `json:"meigen_id"`
	UserID   string    `json:"user_id"`
	Reaction int32     `json:"reaction"`
}

func (q *Queries) CheckReactionExists(ctx context.Context, arg CheckReactionExistsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, checkReactionExists, arg.MeigenID, arg.UserID, arg.Reaction)
	var reaction int32
	err := row.Scan(&reaction)
	return reaction, err
}

const checkUserExists = `-- name: CheckUserExists :one
SELECT count(*) FROM users WHERE id = $1
`

func (q *Queries) CheckUserExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUserExistsGroup = `-- name: CheckUserExistsGroup :one
SELECT permission from user_group_rels WHERE user_id = $1 AND group_id = $2
`

type CheckUserExistsGroupParams struct {
	UserID  string `json:"user_id"`
	GroupID string `json:"group_id"`
}

func (q *Queries) CheckUserExistsGroup(ctx context.Context, arg CheckUserExistsGroupParams) (int16, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsGroup, arg.UserID, arg.GroupID)
	var permission int16
	err := row.Scan(&permission)
	return permission, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (id, name) VALUES ($1, $2) RETURNING id
`

type CreateGroupParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.ID, arg.Name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createMeigen = `-- name: CreateMeigen :one
INSERT INTO meigens (meigen, whom_id, group_id, poet_id) VALUES ($1, $2, $3, $4) ON CONFLICT DO NOTHING RETURNING id
`

type CreateMeigenParams struct {
	Meigen  string    `json:"meigen"`
	WhomID  string    `json:"whom_id"`
	GroupID string    `json:"group_id"`
	PoetID  uuid.UUID `json:"poet_id"`
}

func (q *Queries) CreateMeigen(ctx context.Context, arg CreateMeigenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createMeigen,
		arg.Meigen,
		arg.WhomID,
		arg.GroupID,
		arg.PoetID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPoet = `-- name: CreatePoet :one
INSERT INTO poets (name, group_id) VALUES ($1, $2) RETURNING id
`

type CreatePoetParams struct {
	Name    string `json:"name"`
	GroupID string `json:"group_id"`
}

func (q *Queries) CreatePoet(ctx context.Context, arg CreatePoetParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPoet, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createReaction = `-- name: CreateReaction :one
INSERT INTO reactions (meigen_id, user_id, reaction) VALUES ($1, $2, $3) RETURNING id
`

type CreateReactionParams struct {
	MeigenID uuid.UUID `json:"meigen_id"`
	UserID   string    `json:"user_id"`
	Reaction int32     `json:"reaction"`
}

func (q *Queries) CreateReaction(ctx context.Context, arg CreateReactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createReaction, arg.MeigenID, arg.UserID, arg.Reaction)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password, default_group_id) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateUserParams struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	Email          string `json:"email"`
	Password       string `json:"password"`
	DefaultGroupID string `json:"default_group_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.DefaultGroupID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const fetchGlobalTL = `-- name: FetchGlobalTL :many
SELECT
    meigens.id          AS meigen_id,
    meigens.meigen      AS meigen,
    meigens.whom_id     AS whom_id,
    users.name          AS whom,
    meigens.group_id    AS group_id,
    groups.name         AS group,
    poets.name          AS poet,
    poets.id            AS poet_id,
    meigens.created_at  AS created_at
    FROM meigens
    JOIN groups ON meigens.group_id = groups.id
    JOIN users ON meigens.whom_id = users.id
    JOIN poets ON meigens.poet_id = poets.id
    WHERE meigens.created_at < $2 ORDER BY meigens.created_at DESC LIMIT $1
`

type FetchGlobalTLParams struct {
	Limit     int32        `json:"limit"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type FetchGlobalTLRow struct {
	MeigenID  uuid.UUID    `json:"meigen_id"`
	Meigen    string       `json:"meigen"`
	WhomID    string       `json:"whom_id"`
	Whom      string       `json:"whom"`
	GroupID   string       `json:"group_id"`
	Group     string       `json:"group"`
	Poet      string       `json:"poet"`
	PoetID    uuid.UUID    `json:"poet_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) FetchGlobalTL(ctx context.Context, arg FetchGlobalTLParams) ([]FetchGlobalTLRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchGlobalTL, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchGlobalTLRow
	for rows.Next() {
		var i FetchGlobalTLRow
		if err := rows.Scan(
			&i.MeigenID,
			&i.Meigen,
			&i.WhomID,
			&i.Whom,
			&i.GroupID,
			&i.Group,
			&i.Poet,
			&i.PoetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchTL = `-- name: FetchTL :many
SELECT
    meigens.id          AS meigen_id,
    meigens.meigen      AS meigen,
    meigens.whom_id     AS whom_id,
    users.name          AS whom,
    meigens.group_id    AS group_id,
    groups.name         AS group,
    poets.name          AS poet,
    poets.id            AS poet_id,
    meigens.created_at  AS created_at
    FROM meigens
    LEFT JOIN follow_rels ON meigens.whom_id = follow_rels.followee_id OR meigens.whom_id = follow_rels.follower_id
    JOIN groups ON meigens.group_id = groups.id
    JOIN users ON meigens.whom_id = users.id
    JOIN poets ON meigens.poet_id = poets.id
    WHERE (follow_rels.follower_id = $1 OR meigens.whom_id = $1)
        AND users.default_group_id = groups.id
        AND meigens.created_at < $3 ORDER BY meigens.created_at DESC LIMIT $2
`

type FetchTLParams struct {
	FollowerID string       `json:"follower_id"`
	Limit      int32        `json:"limit"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

type FetchTLRow struct {
	MeigenID  uuid.UUID    `json:"meigen_id"`
	Meigen    string       `json:"meigen"`
	WhomID    string       `json:"whom_id"`
	Whom      string       `json:"whom"`
	GroupID   string       `json:"group_id"`
	Group     string       `json:"group"`
	Poet      string       `json:"poet"`
	PoetID    uuid.UUID    `json:"poet_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) FetchTL(ctx context.Context, arg FetchTLParams) ([]FetchTLRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchTL, arg.FollowerID, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchTLRow
	for rows.Next() {
		var i FetchTLRow
		if err := rows.Scan(
			&i.MeigenID,
			&i.Meigen,
			&i.WhomID,
			&i.Whom,
			&i.GroupID,
			&i.Group,
			&i.Poet,
			&i.PoetID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const follow = `-- name: Follow :exec
INSERT INTO follow_rels (follower_id, followee_id) VALUES ($1, $2)
`

type FollowParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) error {
	_, err := q.db.ExecContext(ctx, follow, arg.FollowerID, arg.FolloweeID)
	return err
}

const getDefaultGroupID = `-- name: GetDefaultGroupID :one
SELECT default_group_id FROM users WHERE id = $1
`

func (q *Queries) GetDefaultGroupID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getDefaultGroupID, id)
	var default_group_id string
	err := row.Scan(&default_group_id)
	return default_group_id, err
}

const getFollowers = `-- name: GetFollowers :many
SELECT follower_id FROM follow_rels WHERE followee_id = $1 ORDER BY follower_id
`

func (q *Queries) GetFollowers(ctx context.Context, followeeID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, followeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var follower_id string
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupsParticipated = `-- name: GetGroupsParticipated :many
SELECT group_id from user_group_rels WHERE user_id = $1
`

func (q *Queries) GetGroupsParticipated(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsParticipated, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var group_id string
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeigenContent = `-- name: GetMeigenContent :one
SELECT
    meigens.id          AS meigen_id,
    meigens.meigen      AS meigen,
    meigens.whom_id     AS whom_id,
    users.name          AS whom,
    meigens.group_id    AS group_id,
    groups.name         AS group,
    poets.name          AS poet,
    poets.id            AS poet_id,
    meigens.created_at  AS created_at
    FROM meigens
    JOIN poets ON meigens.poet_id = poets.id
    JOIN groups ON meigens.group_id = groups.id
    JOIN users ON meigens.whom_id = users.id
    WHERE meigens.id = $1
`

type GetMeigenContentRow struct {
	MeigenID  uuid.UUID    `json:"meigen_id"`
	Meigen    string       `json:"meigen"`
	WhomID    string       `json:"whom_id"`
	Whom      string       `json:"whom"`
	GroupID   string       `json:"group_id"`
	Group     string       `json:"group"`
	Poet      string       `json:"poet"`
	PoetID    uuid.UUID    `json:"poet_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetMeigenContent(ctx context.Context, id uuid.UUID) (GetMeigenContentRow, error) {
	row := q.db.QueryRowContext(ctx, getMeigenContent, id)
	var i GetMeigenContentRow
	err := row.Scan(
		&i.MeigenID,
		&i.Meigen,
		&i.WhomID,
		&i.Whom,
		&i.GroupID,
		&i.Group,
		&i.Poet,
		&i.PoetID,
		&i.CreatedAt,
	)
	return i, err
}

const getPoetID = `-- name: GetPoetID :one
INSERT INTO poets (name, group_id) VALUES ($1, $2) RETURNING id
`

type GetPoetIDParams struct {
	Name    string `json:"name"`
	GroupID string `json:"group_id"`
}

func (q *Queries) GetPoetID(ctx context.Context, arg GetPoetIDParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPoetID, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getPoetIDGroup = `-- name: GetPoetIDGroup :one
SELECT id FROM poets WHERE name = $1 AND group_id = $2
`

type GetPoetIDGroupParams struct {
	Name    string `json:"name"`
	GroupID string `json:"group_id"`
}

func (q *Queries) GetPoetIDGroup(ctx context.Context, arg GetPoetIDGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPoetIDGroup, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id FROM users WHERE id = $1
`

func (q *Queries) GetUserByName(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, id)
	err := row.Scan(&id)
	return id, err
}

const getUserImg = `-- name: GetUserImg :one
SELECT img FROM groups WHERE id = (SELECT default_group_id FROM users WHERE users.id = $1)
`

func (q *Queries) GetUserImg(ctx context.Context, id string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getUserImg, id)
	var img []byte
	err := row.Scan(&img)
	return img, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT users.name, users.bio FROM users WHERE users.id = $1
`

type GetUserProfileRow struct {
	Name string         `json:"name"`
	Bio  sql.NullString `json:"bio"`
}

func (q *Queries) GetUserProfile(ctx context.Context, id string) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, id)
	var i GetUserProfileRow
	err := row.Scan(&i.Name, &i.Bio)
	return i, err
}

const getUsernameByID = `-- name: GetUsernameByID :one
SELECT name FROM users WHERE id = $1
`

func (q *Queries) GetUsernameByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsernameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const initDefaultUG = `-- name: InitDefaultUG :exec
INSERT INTO user_group_rels (user_id, group_id, permission) VALUES ($1, concat($1::VARCHAR(127), '_DEFAULT'), 0xff)
`

func (q *Queries) InitDefaultUG(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, initDefaultUG, userID)
	return err
}

const login = `-- name: Login :one
SELECT id, name, bio, since, email, password, default_group_id, private FROM users WHERE id = $1 AND password = $2
`

type LoginParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
		&i.DefaultGroupID,
		&i.Private,
	)
	return i, err
}

const patchGroupImage = `-- name: PatchGroupImage :exec
UPDATE groups SET img = $2 WHERE id = $1
`

type PatchGroupImageParams struct {
	ID  string `json:"id"`
	Img []byte `json:"img"`
}

func (q *Queries) PatchGroupImage(ctx context.Context, arg PatchGroupImageParams) error {
	_, err := q.db.ExecContext(ctx, patchGroupImage, arg.ID, arg.Img)
	return err
}

const patchUserBio = `-- name: PatchUserBio :exec
UPDATE users SET bio = $2 WHERE id = $1
`

type PatchUserBioParams struct {
	ID  string         `json:"id"`
	Bio sql.NullString `json:"bio"`
}

func (q *Queries) PatchUserBio(ctx context.Context, arg PatchUserBioParams) error {
	_, err := q.db.ExecContext(ctx, patchUserBio, arg.ID, arg.Bio)
	return err
}

const patchUserImage = `-- name: PatchUserImage :one
UPDATE groups SET img = $2 WHERE id = (
    SELECT default_group_id FROM users WHERE users.id = $1)
    RETURNING id
`

type PatchUserImageParams struct {
	ID  string `json:"id"`
	Img []byte `json:"img"`
}

func (q *Queries) PatchUserImage(ctx context.Context, arg PatchUserImageParams) (string, error) {
	row := q.db.QueryRowContext(ctx, patchUserImage, arg.ID, arg.Img)
	var id string
	err := row.Scan(&id)
	return id, err
}

const patchUserName = `-- name: PatchUserName :exec
UPDATE users SET name = $2 WHERE id = $1
`

type PatchUserNameParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) PatchUserName(ctx context.Context, arg PatchUserNameParams) error {
	_, err := q.db.ExecContext(ctx, patchUserName, arg.ID, arg.Name)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT users.id, users.name, groups.img FROM users JOIN groups ON users.default_group_id = groups.id WHERE users.name LIKE $1
`

type SearchUsersRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Img  []byte `json:"img"`
}

func (q *Queries) SearchUsers(ctx context.Context, name string) ([]SearchUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchUsersRow
	for rows.Next() {
		var i SearchUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Img); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unFollow = `-- name: UnFollow :exec
DELETE FROM follow_rels WHERE follower_id = $1 AND followee_id = $2
`

type UnFollowParams struct {
	FollowerID string `json:"follower_id"`
	FolloweeID string `json:"followee_id"`
}

func (q *Queries) UnFollow(ctx context.Context, arg UnFollowParams) error {
	_, err := q.db.ExecContext(ctx, unFollow, arg.FollowerID, arg.FolloweeID)
	return err
}
