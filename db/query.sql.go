// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_group_rels (user_id, group_id, permission) VALUES ($1, $2, $3)
`

type AddUserToGroupParams struct {
	UserID     string
	GroupID    uuid.UUID
	Permission int16
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.UserID, arg.GroupID, arg.Permission)
	return err
}

const checkGroupExists = `-- name: CheckGroupExists :one
SELECT count(*) FROM user_group_rels JOIN groups ON user_group_rels.group_id = groups.id
    WHERE user_id = $1 AND groups.name = $2
`

type CheckGroupExistsParams struct {
	UserID string
	Name   string
}

func (q *Queries) CheckGroupExists(ctx context.Context, arg CheckGroupExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkGroupExists, arg.UserID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkPoetExists = `-- name: CheckPoetExists :one
SELECT count(*) FROM poets WHERE name = $1 AND group_id = $2
`

type CheckPoetExistsParams struct {
	Name    string
	GroupID uuid.UUID
}

func (q *Queries) CheckPoetExists(ctx context.Context, arg CheckPoetExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPoetExists, arg.Name, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUserExists = `-- name: CheckUserExists :one
SELECT count(*) FROM users WHERE id = $1
`

func (q *Queries) CheckUserExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExists, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUserExistsGroup = `-- name: CheckUserExistsGroup :one
SELECT count(*) from user_group_rels WHERE user_id = $1 AND group_id = $2
`

type CheckUserExistsGroupParams struct {
	UserID  string
	GroupID uuid.UUID
}

func (q *Queries) CheckUserExistsGroup(ctx context.Context, arg CheckUserExistsGroupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExistsGroup, arg.UserID, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreateGroup(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createGroup, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createMeigen = `-- name: CreateMeigen :one
INSERT INTO meigens (meigen, whom_id, group_id, poet_id) VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateMeigenParams struct {
	Meigen  string
	WhomID  string
	GroupID uuid.UUID
	PoetID  uuid.UUID
}

func (q *Queries) CreateMeigen(ctx context.Context, arg CreateMeigenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createMeigen,
		arg.Meigen,
		arg.WhomID,
		arg.GroupID,
		arg.PoetID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPoet = `-- name: CreatePoet :one
INSERT INTO poets (name, group_id) VALUES ($1, $2) RETURNING id
`

type CreatePoetParams struct {
	Name    string
	GroupID uuid.UUID
}

func (q *Queries) CreatePoet(ctx context.Context, arg CreatePoetParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPoet, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password, default_group_id) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateUserParams struct {
	ID             string
	Name           string
	Email          string
	Password       string
	DefaultGroupID uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.DefaultGroupID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const follow = `-- name: Follow :exec
INSERT INTO follow_rels (follower_id, followee_id) VALUES ($1, $2)
`

type FollowParams struct {
	FollowerID string
	FolloweeID string
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) error {
	_, err := q.db.ExecContext(ctx, follow, arg.FollowerID, arg.FolloweeID)
	return err
}

const getDefaultGroupID = `-- name: GetDefaultGroupID :one
SELECT default_group_id FROM users WHERE id = $1
`

func (q *Queries) GetDefaultGroupID(ctx context.Context, id string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getDefaultGroupID, id)
	var default_group_id uuid.UUID
	err := row.Scan(&default_group_id)
	return default_group_id, err
}

const getGroupsParticipated = `-- name: GetGroupsParticipated :many
SELECT group_id from user_group_rels WHERE user_id = $1
`

func (q *Queries) GetGroupsParticipated(ctx context.Context, userID string) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsParticipated, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var group_id uuid.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoetID = `-- name: GetPoetID :one
SELECT id FROM poets WHERE name = $1 AND group_id = $2
`

type GetPoetIDParams struct {
	Name    string
	GroupID uuid.UUID
}

func (q *Queries) GetPoetID(ctx context.Context, arg GetPoetIDParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getPoetID, arg.Name, arg.GroupID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id FROM users WHERE id = $1
`

func (q *Queries) GetUserByName(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, id)
	err := row.Scan(&id)
	return id, err
}

const getUsernameByID = `-- name: GetUsernameByID :one
SELECT name FROM users WHERE id = $1
`

func (q *Queries) GetUsernameByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsernameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const initDefaultUG = `-- name: InitDefaultUG :exec
INSERT INTO user_group_rels (user_id, group_id, permission) VALUES ($1, $2, 0xffff)
`

type InitDefaultUGParams struct {
	UserID  string
	GroupID uuid.UUID
}

func (q *Queries) InitDefaultUG(ctx context.Context, arg InitDefaultUGParams) error {
	_, err := q.db.ExecContext(ctx, initDefaultUG, arg.UserID, arg.GroupID)
	return err
}

const login = `-- name: Login :one
SELECT id, name, bio, since, email, password, default_group_id, private FROM users WHERE id = $1 AND password = $2
`

type LoginParams struct {
	ID       string
	Password string
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
		&i.DefaultGroupID,
		&i.Private,
	)
	return i, err
}

const patchUserImage = `-- name: PatchUserImage :one
UPDATE groups SET img = $2 WHERE id = (
    SELECT default_group_id FROM users WHERE users.id = $1)
    RETURNING id
`

type PatchUserImageParams struct {
	ID  string
	Img []byte
}

func (q *Queries) PatchUserImage(ctx context.Context, arg PatchUserImageParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, patchUserImage, arg.ID, arg.Img)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const searchUsers = `-- name: SearchUsers :many
SELECT users.id, users.name, groups.img FROM users JOIN groups ON users.default_group_id = groups.id WHERE users.name LIKE $1
`

type SearchUsersRow struct {
	ID   string
	Name string
	Img  []byte
}

func (q *Queries) SearchUsers(ctx context.Context, name string) ([]SearchUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchUsersRow
	for rows.Next() {
		var i SearchUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Img); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
