// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_group_rels (user_id, group_id) VALUES ($1, $2)
`

type AddUserToGroupParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.db.ExecContext(ctx, addUserToGroup, arg.UserID, arg.GroupID)
	return err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (name, owner_id) VALUES ($1, $2) RETURNING id
`

type CreateGroupParams struct {
	Name    string
	OwnerID uuid.UUID
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.Name, arg.OwnerID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createMeigen = `-- name: CreateMeigen :exec
INSERT INTO meigens (meigen, whom_id, group_id, poet_id) VALUES ($1, $2, $3, $4)
`

type CreateMeigenParams struct {
	Meigen  string
	WhomID  uuid.UUID
	GroupID uuid.NullUUID
	PoetID  uuid.UUID
}

func (q *Queries) CreateMeigen(ctx context.Context, arg CreateMeigenParams) error {
	_, err := q.db.ExecContext(ctx, createMeigen,
		arg.Meigen,
		arg.WhomID,
		arg.GroupID,
		arg.PoetID,
	)
	return err
}

const createPoet = `-- name: CreatePoet :one
INSERT INTO poets (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreatePoet(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPoet, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPoetGroupRel = `-- name: CreatePoetGroupRel :exec
INSERT INTO poet_group_rels (poet_id, group_id) VALUES ($1, $2)
`

type CreatePoetGroupRelParams struct {
	PoetID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) CreatePoetGroupRel(ctx context.Context, arg CreatePoetGroupRelParams) error {
	_, err := q.db.ExecContext(ctx, createPoetGroupRel, arg.PoetID, arg.GroupID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, password) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	return err
}

const getGroupsParticipated = `-- name: GetGroupsParticipated :many
SELECT group_id from user_group_rels WHERE user_id = $1
`

func (q *Queries) GetGroupsParticipated(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsParticipated, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var group_id uuid.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByName = `-- name: GetUserByName :one
SELECT name FROM users WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	err := row.Scan(&name)
	return name, err
}

const getUsernameByID = `-- name: GetUsernameByID :one
SELECT name FROM users WHERE id = $1
`

func (q *Queries) GetUsernameByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUsernameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const groupEX = `-- name: GroupEX :one
SELECT count(*) FROM user_group_rels JOIN groups ON user_group_rels.group_id = groups.id WHERE user_id = $1 AND groups.name = $2
`

type GroupEXParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) GroupEX(ctx context.Context, arg GroupEXParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, groupEX, arg.UserID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const login = `-- name: Login :one
SELECT id, name, bio, since, email, password FROM users WHERE name = $1 AND password = $2
`

type LoginParams struct {
	Name     string
	Password string
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Since,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const poetExGroup = `-- name: PoetExGroup :one
SELECT count(*) FROM poet_group_rels JOIN poets ON poet_group_rels.poet_id = poets.id
WHERE poets.name = $1 AND poet_group_rels.group_id = $2
`

type PoetExGroupParams struct {
	Name    string
	GroupID uuid.UUID
}

func (q *Queries) PoetExGroup(ctx context.Context, arg PoetExGroupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, poetExGroup, arg.Name, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userEXGroup = `-- name: UserEXGroup :one
SELECT count(*) from user_group_rels WHERE user_id = $1 AND group_id = $2
`

type UserEXGroupParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) UserEXGroup(ctx context.Context, arg UserEXGroupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, userEXGroup, arg.UserID, arg.GroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
